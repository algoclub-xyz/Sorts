package com.github.algoclub.sorts;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.params.provider.Arguments.arguments;

public class TimSortTest {

    public static Stream<Arguments> values() {
        return Stream.of(
                arguments(
                        new Integer[] {20, 33, 75, 17, 84, 1, 86, 22, 30, 79, 53, 25, 76, 57, 7, 1, 72, 31, 56, 97, 88, 52, 73, 22, 22, 14, 88, 60, 61, 49, 69, 26, 76, 21, 8, 20, 45, 90, 33, 66, 64, 34, 32, 53, 27, 32, 83, 65, 9, 67, 47, 87, 65, 87, 61, 51, 3, 2, 26, 43, 67, 20, 93, 92, 24, 37, 94, 23, 63, 4, 41, 17, 26, 71, 60, 91, 62, 57, 18, 52, 40, 36, 94, 86, 18, 7, 32, 39, 34, 25, 2, 67, 0, 45, 45, 90, 72, 23, 23, 76},
                        (Comparator<Integer>) Integer::compare
                ),
                arguments(
                        new Integer[] {98, 61, 18, 44, 36, 85, 16, 99, 44, 99, 40, 49, 98, 16, 77, 85, 95, 7, 41, 64, 60, 78, 79, 1, 70, 60, 77, 39, 95, 54, 33, 17, 95, 48, 76, 99, 72, 50, 39, 3, 52, 62, 26, 52, 67, 38, 56, 24, 68, 32, 93, 68, 86, 73, 5, 14, 52, 39, 9, 46, 15, 92, 61, 64, 71, 80, 97, 51, 54, 17, 87, 47, 30, 59, 25, 16, 60, 56, 92, 6, 57, 79, 43, 77, 12, 22, 67, 76, 32, 21, 48, 41, 19, 53, 21, 74, 48, 87, 31, 29, 41, 1, 1, 37, 69, 89, 92, 93, 80, 21, 18, 60, 81, 50, 66, 2, 92, 73, 52, 3, 44, 80, 71, 16, 83, 62, 87, 55, 47, 76, 57, 60, 79, 45, 12, 33, 73, 81, 45, 43, 75, 66, 74, 4, 96, 91, 10, 85, 38, 17, 9, 89, 38, 48, 77, 94, 13, 34, 64, 76, 48, 50, 88, 12, 62, 76, 13, 78, 23, 98, 48, 85, 8, 1, 61, 26, 43, 28, 62, 98, 83, 84, 86, 88, 44, 84, 47, 39, 83, 42, 22, 77, 77, 60, 28, 30, 98, 87, 47, 77, 46, 58, 40, 57, 26, 53, 88, 78, 69, 47, 80, 82, 62, 22, 48, 31, 99, 19, 28, 38, 59, 92, 34, 99, 18, 61, 76, 38, 64, 11, 11, 22, 72, 54, 2, 28, 34, 65, 6, 51, 49, 3, 19, 58, 48, 93, 32, 71, 13, 79, 89, 52, 34, 82, 69, 43, 19, 43, 94, 24, 36, 9, 2, 86, 65, 93, 5, 78, 70, 61, 24, 19, 96, 41, 90, 65, 63, 92, 20, 27, 27, 5, 13, 65, 20, 14, 31, 89, 77, 98, 2, 19, 43, 9, 15, 33, 58, 27, 0, 99, 52, 43, 73, 35, 18, 49, 89, 90, 96, 49, 70, 57, 56, 96, 37, 4, 20, 18, 79, 15, 0, 51, 37, 46, 66, 92, 39, 37, 51, 71, 36, 71, 53, 13, 63, 22, 50, 95, 53, 73, 42, 76, 66, 16, 67, 93, 48, 4, 65, 37, 3, 31, 31, 21, 39, 16, 25, 25, 52, 32, 26, 44, 23, 91, 12, 56, 79, 96, 36, 47, 47, 74, 36, 47, 54, 6, 82, 46, 95, 72, 100, 70, 76, 35, 64, 99, 25, 33, 64, 28, 17, 80, 49, 84, 98, 94, 89, 15, 56, 56, 68, 81, 19, 36, 65, 65, 30, 58, 4, 24, 68, 36, 93, 15, 40, 23, 92, 1, 39, 17, 32, 63, 41, 16, 42, 44, 4, 72, 24, 48, 83, 59, 33, 17, 93, 26, 82, 17, 94, 79, 5, 43, 46, 49, 60, 92, 58, 36, 33, 87, 21, 55, 6, 12, 19, 16, 61, 37, 33, 81, 48, 60, 40, 6, 91, 12, 48, 39, 9, 23, 46, 20, 28, 67, 19, 15, 66, 7, 58, 10, 76, 28, 17, 59, 47, 26, 11, 67, 21, 79, 92, 86, 81, 86, 10, 61, 77, 54, 97, 50, 54, 48, 5, 30, 22, 5, 23, 59, 16, 87, 90, 36, 14, 95, 53, 42, 45, 85, 16, 4, 80, 31, 89, 79, 1, 24, 42, 57, 35, 17, 55, 3, 75, 98, 27, 50, 42, 60, 77, 30, 7, 77, 75, 21, 12, 24, 71, 80, 91, 90, 89, 35, 45, 98, 69, 19, 67, 2, 14, 55, 27, 45, 8, 69, 21, 86, 57, 14, 45, 9, 20, 11, 86, 27, 88, 46, 16, 36, 29, 33, 83, 17, 72, 93, 26, 83, 80, 63, 48, 3, 11, 26, 74, 9, 1, 47, 1, 48, 21, 47, 37, 10, 4, 16, 45, 80, 84, 100, 8, 88, 84, 34, 8, 44, 71, 64, 52, 56, 8, 1, 18, 43, 55, 43, 21, 56, 52, 51, 55, 35, 81, 87, 72, 56, 70, 58, 82, 85, 44, 61, 80, 90, 87, 92, 30, 25, 10, 15, 48, 75, 56, 47, 5, 52, 89, 35, 62, 91, 22, 84, 17, 1, 96, 71, 26, 16, 40, 35, 77, 35, 84, 29, 14, 15, 57, 74, 61, 7, 52, 41, 90, 68, 34, 79, 6, 83, 13, 91, 53, 67, 80, 98, 82, 13, 10, 95, 74, 40, 63, 55, 31, 24, 47, 0, 26, 86, 32, 4, 24, 62, 9, 31, 89, 79, 64, 17, 97, 49, 33, 64, 18, 31, 51, 57, 48, 50, 84, 61, 30, 84, 68, 0, 36, 32, 97, 7, 94, 18, 100, 34, 7, 83, 10, 7, 43, 3, 13, 84, 6, 83, 99, 2, 83, 40, 78, 73, 41, 3, 64, 60, 59, 56, 25, 74, 67, 82, 18, 76, 2, 98, 14, 93, 53, 3, 5, 93, 85, 65, 78, 59, 83, 96, 11, 28, 46, 91, 63, 75, 76, 5, 86, 16, 55, 67, 48, 16, 23, 50, 54, 18, 87, 65, 66, 13, 99, 54, 24, 34, 37, 73, 7, 94, 54, 3, 45, 24, 82, 58, 83, 94, 19, 64, 92, 15, 88, 2, 44, 46, 79, 30, 67, 49, 18, 84, 58, 67, 41, 98, 9, 46, 71, 19, 46, 18, 22, 33, 22, 95, 60, 82, 36, 13, 92, 39, 94, 20, 96, 96, 92, 14, 35, 32, 85, 29, 95, 40, 43, 13, 48, 25, 92, 73, 98, 95, 83, 63, 23, 36, 32, 98, 67, 74, 55, 39, 29, 72, 58, 5, 28, 42, 36, 85, 8, 79, 25, 89, 48, 42, 7, 87, 12, 15, 72, 85, 10, 79, 30, 91, 9, 43, 5, 94, 50, 84, 38, 84, 84, 45, 7, 65, 9, 95, 81, 27, 92, 36, 76, 59, 81, 87, 52, 3, 57, 13, 37, 52, 23, 84, 13, 57, 61, 42, 4, 14, 3, 27, 16, 99, 76, 81, 63, 19, 80, 33, 70, 19, 33, 54, 74, 47, 73, 55, 5, 37, 95, 83, 10, 85, 91, 25, 3, 0, 93, 17, 88, 15, 99, 32, 19, 40, 70, 66, 12, 47, 82, 77, 47, 84, 86, 60, 76, 23, 16, 45, 16, 7, 56, 38, 74, 39},
                        (Comparator<Integer>) Integer::compare
                ),
                arguments(
                        new Integer[] {-585, -59, -212, -450, -321, 395, -762, 356, -670, -423, -548, -281, -3, 426, 510, 774, 469, 841, 827, -234, 212, -223, 667, -739, 474, -715, 393, 965, -779, -375, 444, 609, -930, 179, 721, 436, 879, -350, 952, -439, 133, 750, -111, -145, 751, 580, 639, -784, -917, 843, -409, -830, 66, 967, -521, -174, 832, 635, 882, 647, 513, 636, 753, -554, 211, -904, 987, -167, -908, -58, 164, 202, 922, 140, 948, 965, -961, -304, -798, -986, 365, -240, -400, -769, 225, -488, 465, -669, -666, 355, 918, -614, -940, 549, 469, 535, 18, -546, -188, -474, -807, -174, -628, -496, 581, 747, -954, 674, -360, 901, -639, -304, -76, 267, 120, -93, 113, -736, 30, 194, 856, 209, -550, -845, -638, -971, -719, 776, -11, -112, 387, -159, 799, 575, -333, 21, -697, -291, -887, -171, -864, -327, -182, -70, -123, -877, 681, -827, -413, -902, 822, 445, 575, 979, 990, -400, -30, 352, 565, 312, -63, -879, -720, 460, 663, -746, 420, -565, 663, -797, -448, -731, 949, 239, -902, 189, 967, -219, -340, 774, 662, -806, 481, -789, 61, -405, -989, -870, -959, 52, -548, -532, -672, 802, -715, 546, -799, 931, -199, 460, 440, 693, 981, -607, 314, 709, 621, 51, -878, -596, 971, 541, 433, -444, 621, -909, -36, -966, 86, -444, -389, 561, -941, -412, -57, -577, -660, -936, 280, -405, 149, -32, -953, 195, 605, 447, 85, 706, 441, -972, 524, -46, 511, -312, -449, 345, -983, -211, 792, -791, 927, -962, -555, 749, 43, 80, -799, -676, -346, -621, 973, -301, -475, 960, 298, 305, 841, 981, 912, 613, 486, -521, -907, 447, -343, 978, 696, -11, -207, 71, -484, -188, 513, 538, -841, -793, -987, 665, -643, -68, 312, 658, -665, 533, 21, 705, -189, 57, -266, -520, -643, -604, -455, -175, 291, 157, -97, -846, -621, -359, -257, -720, 998, 210, -503, 492, 328, 650, 354, 522, -634, 214, -437, -952, 56, -928, -540, 78, -226, 128, -302, 309, -647, 45, -981, 585, -653, -731, -263, 286, -533, -988, -913, 133, 991, -42, 398, 68, 730, 564, -369, 716, -197, 79, 997, -282, -406, 737, -59, 17, -51, -634, 780, 0, 766, -941, -321, 601, -703, -167, 63, 59, -384, 256, 572, -1, 10, 389, -637, -106, 931, 486, -926, 247, 28, 225, -571, -436, 837, -941, -465, 631, -831, 812, 635, -879, 277, 842, 486, -416, 134, 112, -242, -360, -809, 541, -497, 529, 541, 914, 770, 356, 381, 934, 352, -167, 429, 840, 686, 915, 28, -822, -91, -316, -471, -55, 172, 704, -308, -221, 970, -670, -837, -749, 187, -218, -589, -212, -594, 618, 117, -610, -900, -199, 514, -326, -604, -838, -390, 154, 148, -468, 293, -968, -474, 949, -852, 954, -718, 29, 714, 643, -625, -665, -138, -38, 633, 626, -628, 544, -292, 436, -7, 400, -110, -42, 608, -270, -564, 239, -68, 4, 987, 517, 626, -34, -633, -252, -695, 45, -674, 471, -548, -36, 848, -929, 828, -706, 938, -755, 614, -59, -65, 259, -466, 998, -862, -500, -193, -967, -55, -849, 49, 148, -305, 889, 266, -251, 552, -561, 185, -222, 774, -205, -527, 608, -144, -955, -652, -864, 36, -210, 82, -610, 468, 402, 950, -941, 918, 316, -131, -121, -24, -416, 344, -183, -903, -49, 762, -459, -164, 73, 657, 301, 100, -249, 913, 784, 439, 1000, 900, -264, 131, -684, -904, 517, 589, 474, -136, 123, -221, 73, -671, 956, 491, -558, 59, -21, 205, 433, -268, -352, 878, -947, -628, 951, 461, -795, 638, 500, 871, 154, -840, 804, -874, 730, 349, 645, 469, 773, -7, 78, -366, -174, -222, 597, -398, 38, -241, -590, 849, 275, 251, -563, -66, 530, -472, 667, 399, -594, -597, -756, -343, 153, -875, 866, 119, 786, -893, 870, -379, 753, -11, 108, -809, -224, 74, -766, -240, -980, 588, 426, -154, -785, -420, -877, -552, -758, -914, 933, 989, 541, 251, 41, 565, -636, -449, 626, -860, -122, -427, -115, -462, -506, -148, 280, 55, -331, -55, 492, -650, -934, -182, 821, -457, 791, -453, 460, -588, -483, 227, -794, -104, 525, 783, 565, 83, -597, -234, -427, 680, -765, -347, 836, 494, -399, -125, -654, 762, -313, 849, -714, -33, -574, -767, -132, 326, 893, -127, 336, -940, 352, -784, -533, 921, -345, 431, 198, 308, 605, 738, -886, -134, 799, -61, 805, -301, 786, -371, -862, -149, 447, 942, -605, -110, 655, -409, 848, 586, -565, 659, 476, 109, -653, -817, 120, 442, -851, -360, 664, -998, 922, 524, 751, 990, -694, -7, -748, 249, -857, -539, -561, 671, 756, 950, -186, -66, -212, 967, -253, 626, 977, 668, 112, -871, 85, 512, 714, -455, 90, 950, 30, -385, -238, 438, -809, -250, 29, 771, -370, -327, 453, -616, 952, -926, 103, 435, 3, 112, 511, 945, 509, 918, 195, 17, 788, -739, 93, -933, -372, 436, -932, 755, 354, -102, 265, -55, 499, -314, -727, -759, -577, -663, -504, -749, 338, 952, 803, 886, -951, -870, -961, 145, -109, 404, 171, -143, -660, -675, -218, -554, -462, -67, 351, -587, 621, 242, -225, 283, 670, -911, -247, -626, 890, -536, 663, 600, 269, -40, -689, -789, 713, -645, -92, 649, 97, 363, -468, -643, 723, -407, 596, 27, 762, 557, -574, 305, -808, 167, -232, -737, -967, 909, -542, 240, 435, 533, 194, 637, -456, 111, 400, -986, -556, 485, 680, -226, 145, -74, -948, 170, 59, -840, -787, 850, -302, 526, 380, 966, 489, -374, 413, -527, -732, 291, 883, 760, -923, 681, -411, -553, 859, -724, 32, -811, -566, 988, -813, 824, -982, 648, -892, 999, 643, -550, 416, 335, -388, 465, 910, -794, -625, 341, 526, 34, -335, 939, 888, 259, -503, -140, 822, 59, -204, -610, -258, -723, -221, -962, -979, -560, -682, -33, 225, 925, -82, 57, -484, 476, 608, -129, 279, -532, -7, -786, -196, 53, -852, -431, -403, -325, 726, -803, 155, 908, -712, -322, 944, 797, -893, -346, -306, 590, -240, 67, -683, 140, 309, -433, -800},
                        (Comparator<Integer>) Integer::compare
                ),
                arguments(
                        new Integer[] {-9295, 6981, 1815, 8357, -5895, 1250, 9341, 1317, -2509, -8533, -21, 9030, 4098, -5357, -3765, 2277, 1155, 7253, -7917, 9821, 869, 18, 9798, -3582, -3509, -3705, -5250, -6076, -1042, -2371, -7292, -3402, 3706, -8666, -5508, 9560, -3775, 8222, 6104, 9276, 721, 9374, 144, -9065, 1282, 9143, -8364, 6127, -9124, -7375, -3830, -9307, 4689, 4964, 9730, -7011, -7156, 2085, 893, 5115, -2727, 3885, 6859, 2844, -6412, -5362, -6749, -558, -5711, -6187, -128, 1186, -6133, 5689, 9684, 340, 9999, -9956, -5205, -5532, -4886, -6994, -9211, 5010, 3542, -6471, -4314, 9708, -3704, 6406, 880, -7956, -9502, 9343, 2558, -8602, -8027, 2517, 712, 4665, 68, -2859, 7732, -4630, 9559, 5700, 1599, -440, 168, 1523, -4104, -5542, -5784, 3350, 3716, -2641, 8048, -9276, -7570, -1346, -3048, -2812, 1453, -2705, 2143, 2442, 6618, 8037, 1545, 2025, 7442, -5109, 2069, -2927, -8153, 9640, -8116, 9530, 6827, -212, 9675, -5569, -163, -9833, 8151, 2652, -1821, -4848, -7673, -1441, -3534, -5720, 2633, 2774, -8593, -3798, -5615, 5762, -1292, 1917, -2463, 2063, 9760, -6352, -7732, 9611, 8284, 8305, -7919, 3246, -255, 5430, -7856, 5809, -8075, -3905, -1377, 5155, 6935, -6942, -9158, 785, -4235, -349, -4760, 782, -6214, 9540, 5171, -1044, -154, 9802, 6107, 5998, -7708, -6382, 4008, -4647, -1128, -7220, -5861, 1071, -394, 280, -3188, 4270, 2098, 4729, -9314, -3516, -8695, -9490, 8661, -5161, -7422, 7027, 4055, -1491, -3582, 9005, 3617, 6625, 3822, -3644, 3580, 4068, 4937, -3761, -2540, -2851, 7101, -2058, -5902, 8766, -6897, 7383, 6819, -4715, 412, 1412, -1392, -5145, 2775, 2850, -2612, -4738, -4763, -2107, 5190, 8712, 8586, 7214, 8575, -1402, -7031, -8425, -6799, -7024, 9889, -5631, -8196, -3078, -7537, -5628, 816, -5933, 5932, 9648, 9659, 1205, -3439, -8214, 1108, 9648, -6682, 2292, -1796, 4444, -3906, -279, 6393, 2824, -4290, -5247, 6625, -6302, -9090, -7549, 2046, 6795, 9702, -8665, 9707, 8741, -8837, 6800, 9762, -9542, -1290, -387, 7370, 5941, 3131, -5413, -9039, -9580, -2141, -6938, -7308, 8585, -4624, -1607, 8135, 5376, -5363, -5767, 6244, 2739, -7654, 3889, -8745, -1741, 5541, -2421, 2891, -3099, 5041, 1941, -8941, -4372, -3908, -5515, -3918, -9474, -6247, -7944, -542, 7027, -5625, -3911, -89, -957, -6344, -4983, 4328, 849, -3407, 9506, 5925, 1323, -9439, 3233, 9366, -1592, 6103, -6807, -8481, -9711, -779, -6399, 1684, -571, 7242, -8088, -8687, 9294, 6923, 3445, 6143, -1466, -4821, -1079, -8317, -9660, -4977, -2719, 4209, -8359, 3699, -5204, 7207, -3973, -7958, -5676, 3043, -4245, 3690, -3655, 3391, -6151, -7855, -2935, -3744, 2345, 9394, -7672, -3443, -5655, -355, -2942, 8889, 5643, 4534, 2946, -8318, 7926, 9162, -245, 734, 6816, -4673, 5825, 769, 5794, -2753, -8931, -6315, 9228, 8260, -5985, -8588, -5310, -5072, -7655, -6340, 4111, 1031, -3468, -9738, -7026, 2235, -3210, 9581, -1474, -9774, -1116, 6805, -2883, 888, 6809, 4264, 4768, 1052, 6808, 8200, 948, -5076, -4364, -3827, -1983, 2339, 7875, 470, -4354, 2415, -3194, 1532, -4972, 9218, 7550, 9977, -3186, 2599, -6044, 8367, 7596, 5205, 638, -8488, -6752, 3645, 1004, 2729, 6514, -2278, 1123, 1738, -4117, -8039, 1752, -9462, -2150, -4117, -40, 4091, -1082, 9739, 8378, 323, 5319, -7768, -8263, 9784, -4401, 72, 2450, 7613, -6873, -9921, -8437, -9413, 276, 9733, -4805, 9876, -1012, -7744, 8761, -4652, 9440, -3671, 5881, -839, 4187, -2733, 8464, 1668, -8615, -9366, 5395, -7928, 5003, -206, -8551, -7044, -3613, -6785, 2455, -1636, 5707, 8684, 4134, -9506, 7316, 9990, -7278, -5063, -8942, -1465, -3240, 4252, 513, 4241, -6268, 6671, 4028, 9804, -7141, 5328, 8353, 8058, 2878, 4190, 9271, 3763, 4532, 3811, -7455, -4497, -309, 8250, 3159, -4324, 8811, -9563, 5083, -3857, 5513, -4146, 5329, 5435, 157, -308, -1107, 669, 3022, -9529, -3072, 7296, 757, 3459, -9975, 1936, -5399, 1957, 7252, 889, -4254, 8093, 6209, -269, -9842, 5323, -4751, 2677, 7211, -4094, 3013, -5504, 8779, 2899, -6854, -6866, 6915, 8334, -6944, 3285, 5423, -7200, 4545, -5362, 1515, 1105, 1950, 7929, 4371, -2455, -8183, -4129, -7751, 8903, 2366, 8362, 451, 8815, 9092, -2606, 8517, -7868, -8370, 1819, 1093, 5646, 6517, 7497, -5122, -8590, -5055, 9524, -6637, 3600, 5195, -452, -1816, 3495, -8596, 2980, -1442, -5600, 4291, -7356, -5071, 4124, 2030, -9136, 4777, 2845, -4601, 9870, -8844, -4385, -7367, -1578, 5841, 5521, 7012, 8910, 2985, 6737, 901, 629, 4434, -4719, -5890, -6565, -7939, 4602, 3196, -4507, 3950, 6563, -9838, -2962, -8388, 6842, 6195, 5401, 8861, 2270, 9462, 3941, -8814, -1757, 5921, 3133, 7277, -1036, 8747, -6861, -5705, 6047, -2076, -5048, 6885, 1221, 1665, -2793, 158, -7249, -4368, -5730, -1266, 1402, 8572, 7400, -6705, 9768, -3613, 512, 9817, 8890, 8579, -909, 9279, -2240, -9437, -1102, 7482, 2161, 9140, 3996, -1524, 6040, -3885, -3425, -4507, 8857, -2084, -1694, -1699, -5786, -9660, -2055, 6286, 5843, -9363, 4811, 8342, -1590, -5843, -7554, 1308, -6954, -9540, 9866, -1252, 111, 2287, -5963, 5668, 5610, 4416, -5665, -6958, 7706, -1042, 162, -4032, 9288, 1682, -7364, 8287, 9699, -6071, -5446, -7614, -1351, -9708, -4234, -6490, -5275, -5364, 7840, 6221, 6674, 6345, -818, 5538, -8712, -6735, 9765, 9248, -8638, 1943, -3686, 1416, 8289, -5374, 1496, 8266, -7167, 787, 1285, -2120, -7039, 6689, 9278, -2657, 2843, 1873, -673, -5880, 1331, 2188, -6453, 8424, 8126, 6867, -9383, -3213, 8846, 1928, -6597, 2628, -8726, 542, 7791, -9291, 5223, 552, -3537, -5185, -6133, 9551, -6115, 2002, -4823, 232, -5015, -7248, 9916, -1788, 6708, -4763, -5485, -9458, 1303, 2375, 5577, 3650, -6698, -9737, -1376, 5520, 7888, -2347, 9863, -3455, -8534, 7585, -85, -3975, -2714, -2330, 3593, -418, 7136, -2420, -793, 310, -3114, 778, 1350, -2130, -427, -5415, -2300, -7119, 564, -994, 3086, 3477, 1985, 1922, -3811, 4327, 7232, 8796, 6507, -2603, 2532, -3476, 6679, -7422, -1930, 493, 535, 4683, -6517, -8918, -612, -5992, -9868, -8387, -1958, -4502, 943, -9869, -3068, -6320, 1142, -7341, -8290, 3717, 1369, -727, 5525, -3691, 8053, 713, -579, -7574, 2908, -4311, 4149, 8793, -1760, -3690, -4680, 2750, -7114, -2032, -1927, 591, 8791, 8613, 6666, -4874, -3140, 3503, -1219, -7847, 3426, -9765, -2734, 405, 1193, 1413, 9098, 568, -7075, 2315, -7533, -5059, -4455, -9417, 738, 2666, 5960, -9588, -9463, -736, -4376, -4435, 4, 7522, -7856, -4987, 761, 7256, -3232, 4834, -904, -5238, -5482, 8295, -1361, 8719, 5436, 5342, -9221, 321, 5025, 3795, 2401, 986, -5219, 5888, -5400, -6921, 8334, -778, -1735, 1015, -851, -9475, -7599, 9538, -7905, -9486},
                        (Comparator<Integer>) Integer::compare
                ),
                arguments(
                        new Integer[] {},
                        (Comparator<Integer>) Integer::compare
                ),
                arguments(
                        new Integer[] {6, -10, 21},
                        (Comparator<Integer>) Integer::compare
                ),
                arguments(
                        new Integer[] {3},
                        (Comparator<Integer>) Integer::compare
                ),
                arguments(
                        new Long[] {75445L, 93254L, 57227L, -96237L, 97799L, -48208L, 94807L, 31293L, 77283L, 7729L, -93506L, 62462L, 15464L, -9013L, 35114L, -56628L, 54988L, 93221L, -53904L, 13415L, 65331L, -32769L, 3795L, 56969L, -67668L, -89728L, -15054L, -44121L, 74330L, 94075L, 37361L, -39392L, -34820L, 53644L, 2665L, 60427L, 96173L, 87511L, -66509L, 63141L, 82089L, 29378L, 67172L, 10117L, -91023L, -8460L, -51647L, -27311L, -45108L, -455L, -21120L, -1237L, -32234L, -38055L, 84240L, 16945L, 11444L, -74401L, 18475L, 45900L, 6392L, 93056L, 7447L, -61291L, 48476L, -96956L, -75389L, -95664L, 7688L, -98671L, 95106L, 43959L, -32104L, -26805L, 94660L, -56606L, 56908L, -55126L, 34502L, 81776L, 32483L, 5394L, 32448L, -55701L, -19483L, 640L, -23312L, 18600L, 73833L, -2117L, -20995L, -19383L, -99836L, 1552L, -75792L, -98143L, 37593L, -87081L, 59744L, 62792L},
                        (Comparator<Long>) Long::compare
                ),
                arguments(
                        new Integer[] {3, 10, 11, 12321, -67, 91, 32},
                        null
                )
        );
    }

    @ParameterizedTest
    @MethodSource("values")
    public <T> void testThatSortingWorksFine(T[] array, Comparator<T> comparator) {
        T[] actual = array.clone();
        Arrays.sort(actual, comparator);

        T[] expected = array.clone();
        TimSort.sort(expected, comparator);

        assertArrayEquals(actual, expected);
    }

}
